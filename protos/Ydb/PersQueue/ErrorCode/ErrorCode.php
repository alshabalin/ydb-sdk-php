<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kikimr/public/api/protos/persqueue_error_codes_v1.proto

namespace Ydb\PersQueue\ErrorCode;

use UnexpectedValueException;

/**
 *500000..500999
 *
 * Protobuf type <code>Ydb.PersQueue.ErrorCode.ErrorCode</code>
 */
class ErrorCode
{
    /**
     * Generated from protobuf enum <code>OK = 0;</code>
     */
    const OK = 0;
    /**
     * Generated from protobuf enum <code>INITIALIZING = 500001;</code>
     */
    const INITIALIZING = 500001;
    /**
     * Generated from protobuf enum <code>OVERLOAD = 500002;</code>
     */
    const OVERLOAD = 500002;
    /**
     * Generated from protobuf enum <code>BAD_REQUEST = 500003;</code>
     */
    const BAD_REQUEST = 500003;
    /**
     * Generated from protobuf enum <code>WRONG_COOKIE = 500004;</code>
     */
    const WRONG_COOKIE = 500004;
    /**
     * Generated from protobuf enum <code>SOURCEID_DELETED = 500024;</code>
     */
    const SOURCEID_DELETED = 500024;
    /**
     * Generated from protobuf enum <code>WRITE_ERROR_PARTITION_IS_FULL = 500005;</code>
     */
    const WRITE_ERROR_PARTITION_IS_FULL = 500005;
    /**
     * Generated from protobuf enum <code>WRITE_ERROR_DISK_IS_FULL = 500015;</code>
     */
    const WRITE_ERROR_DISK_IS_FULL = 500015;
    /**
     * Generated from protobuf enum <code>WRITE_ERROR_BAD_OFFSET = 500019;</code>
     */
    const WRITE_ERROR_BAD_OFFSET = 500019;
    /**
     * Generated from protobuf enum <code>CREATE_SESSION_ALREADY_LOCKED = 500006;</code>
     */
    const CREATE_SESSION_ALREADY_LOCKED = 500006;
    /**
     * Generated from protobuf enum <code>DELETE_SESSION_NO_SESSION = 500007;</code>
     */
    const DELETE_SESSION_NO_SESSION = 500007;
    /**
     * Generated from protobuf enum <code>READ_ERROR_IN_PROGRESS = 500008;</code>
     */
    const READ_ERROR_IN_PROGRESS = 500008;
    /**
     * Generated from protobuf enum <code>READ_ERROR_NO_SESSION = 500009;</code>
     */
    const READ_ERROR_NO_SESSION = 500009;
    /**
     * Generated from protobuf enum <code>READ_ERROR_TOO_SMALL_OFFSET = 500011;</code>
     */
    const READ_ERROR_TOO_SMALL_OFFSET = 500011;
    /**
     * Generated from protobuf enum <code>READ_ERROR_TOO_BIG_OFFSET = 500012;</code>
     */
    const READ_ERROR_TOO_BIG_OFFSET = 500012;
    /**
     * Generated from protobuf enum <code>SET_OFFSET_ERROR_COMMIT_TO_FUTURE = 500013;</code>
     */
    const SET_OFFSET_ERROR_COMMIT_TO_FUTURE = 500013;
    /**
     * Generated from protobuf enum <code>TABLET_IS_DROPPED = 500014;</code>
     */
    const TABLET_IS_DROPPED = 500014;
    /**
     * Generated from protobuf enum <code>READ_NOT_DONE = 500016;</code>
     */
    const READ_NOT_DONE = 500016;
    /**
     * Generated from protobuf enum <code>UNKNOWN_TOPIC = 500017;</code>
     */
    const UNKNOWN_TOPIC = 500017;
    /**
     * Generated from protobuf enum <code>ACCESS_DENIED = 500018;</code>
     */
    const ACCESS_DENIED = 500018;
    /**
     * Generated from protobuf enum <code>CLUSTER_DISABLED = 500020;</code>
     */
    const CLUSTER_DISABLED = 500020;
    /**
     * Generated from protobuf enum <code>WRONG_PARTITION_NUMBER = 500021;</code>
     */
    const WRONG_PARTITION_NUMBER = 500021;
    /**
     * Generated from protobuf enum <code>PREFERRED_CLUSTER_MISMATCHED = 500022;</code>
     */
    const PREFERRED_CLUSTER_MISMATCHED = 500022;
    /**
     * Generated from protobuf enum <code>ERROR = 500100;</code>
     */
    const ERROR = 500100;

    private static $valueToName = [
        self::OK => 'OK',
        self::INITIALIZING => 'INITIALIZING',
        self::OVERLOAD => 'OVERLOAD',
        self::BAD_REQUEST => 'BAD_REQUEST',
        self::WRONG_COOKIE => 'WRONG_COOKIE',
        self::SOURCEID_DELETED => 'SOURCEID_DELETED',
        self::WRITE_ERROR_PARTITION_IS_FULL => 'WRITE_ERROR_PARTITION_IS_FULL',
        self::WRITE_ERROR_DISK_IS_FULL => 'WRITE_ERROR_DISK_IS_FULL',
        self::WRITE_ERROR_BAD_OFFSET => 'WRITE_ERROR_BAD_OFFSET',
        self::CREATE_SESSION_ALREADY_LOCKED => 'CREATE_SESSION_ALREADY_LOCKED',
        self::DELETE_SESSION_NO_SESSION => 'DELETE_SESSION_NO_SESSION',
        self::READ_ERROR_IN_PROGRESS => 'READ_ERROR_IN_PROGRESS',
        self::READ_ERROR_NO_SESSION => 'READ_ERROR_NO_SESSION',
        self::READ_ERROR_TOO_SMALL_OFFSET => 'READ_ERROR_TOO_SMALL_OFFSET',
        self::READ_ERROR_TOO_BIG_OFFSET => 'READ_ERROR_TOO_BIG_OFFSET',
        self::SET_OFFSET_ERROR_COMMIT_TO_FUTURE => 'SET_OFFSET_ERROR_COMMIT_TO_FUTURE',
        self::TABLET_IS_DROPPED => 'TABLET_IS_DROPPED',
        self::READ_NOT_DONE => 'READ_NOT_DONE',
        self::UNKNOWN_TOPIC => 'UNKNOWN_TOPIC',
        self::ACCESS_DENIED => 'ACCESS_DENIED',
        self::CLUSTER_DISABLED => 'CLUSTER_DISABLED',
        self::WRONG_PARTITION_NUMBER => 'WRONG_PARTITION_NUMBER',
        self::PREFERRED_CLUSTER_MISMATCHED => 'PREFERRED_CLUSTER_MISMATCHED',
        self::ERROR => 'ERROR',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

