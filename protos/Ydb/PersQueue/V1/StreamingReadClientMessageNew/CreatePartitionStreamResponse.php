<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kikimr/public/api/protos/ydb_persqueue_v1.proto

namespace Ydb\PersQueue\V1\StreamingReadClientMessageNew;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Signal for server that cient is ready to recive data for partition.
 *
 * Generated from protobuf message <code>Ydb.PersQueue.V1.StreamingReadClientMessageNew.CreatePartitionStreamResponse</code>
 */
class CreatePartitionStreamResponse extends \Google\Protobuf\Internal\Message
{
    /**
     * Partition stream identifier of partition to start read.
     *
     * Generated from protobuf field <code>int64 partition_stream_id = 1;</code>
     */
    protected $partition_stream_id = 0;
    /**
     * Start reading from partition offset that is not less than read_offset.
     * Init.max_time_lag_ms and Init.read_timestamp_ms could lead to skip of more messages.
     * The same with actual committed offset. Regardless of set read_offset server will return data from maximal offset from read_offset, actual committed offset
     * and offsets calculated from Init.max_time_lag_ms and Init.read_timestamp_ms.
     *
     * Generated from protobuf field <code>int64 read_offset = 2;</code>
     */
    protected $read_offset = 0;
    /**
     * All messages with offset less than commit_offset are processed by client. Server will commit this position if this is not done yet.
     *
     * Generated from protobuf field <code>int64 commit_offset = 3;</code>
     */
    protected $commit_offset = 0;
    /**
     * This option will enable sanity check on server for read_offset. Server will verify that read_offset is no less that actual committed offset.
     * If verification will fail then server will kill this read session and client will find out error in reading logic.
     * If client is not setting read_offset, sanity check will fail so do not set verify_read_offset if you not setting correct read_offset.
     *
     * Generated from protobuf field <code>bool verify_read_offset = 4;</code>
     */
    protected $verify_read_offset = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int|string $partition_stream_id
     *           Partition stream identifier of partition to start read.
     *     @type int|string $read_offset
     *           Start reading from partition offset that is not less than read_offset.
     *           Init.max_time_lag_ms and Init.read_timestamp_ms could lead to skip of more messages.
     *           The same with actual committed offset. Regardless of set read_offset server will return data from maximal offset from read_offset, actual committed offset
     *           and offsets calculated from Init.max_time_lag_ms and Init.read_timestamp_ms.
     *     @type int|string $commit_offset
     *           All messages with offset less than commit_offset are processed by client. Server will commit this position if this is not done yet.
     *     @type bool $verify_read_offset
     *           This option will enable sanity check on server for read_offset. Server will verify that read_offset is no less that actual committed offset.
     *           If verification will fail then server will kill this read session and client will find out error in reading logic.
     *           If client is not setting read_offset, sanity check will fail so do not set verify_read_offset if you not setting correct read_offset.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Kikimr\PBPublic\Api\Protos\YdbPersqueueV1::initOnce();
        parent::__construct($data);
    }

    /**
     * Partition stream identifier of partition to start read.
     *
     * Generated from protobuf field <code>int64 partition_stream_id = 1;</code>
     * @return int|string
     */
    public function getPartitionStreamId()
    {
        return $this->partition_stream_id;
    }

    /**
     * Partition stream identifier of partition to start read.
     *
     * Generated from protobuf field <code>int64 partition_stream_id = 1;</code>
     * @param int|string $var
     * @return $this
     */
    public function setPartitionStreamId($var)
    {
        GPBUtil::checkInt64($var);
        $this->partition_stream_id = $var;

        return $this;
    }

    /**
     * Start reading from partition offset that is not less than read_offset.
     * Init.max_time_lag_ms and Init.read_timestamp_ms could lead to skip of more messages.
     * The same with actual committed offset. Regardless of set read_offset server will return data from maximal offset from read_offset, actual committed offset
     * and offsets calculated from Init.max_time_lag_ms and Init.read_timestamp_ms.
     *
     * Generated from protobuf field <code>int64 read_offset = 2;</code>
     * @return int|string
     */
    public function getReadOffset()
    {
        return $this->read_offset;
    }

    /**
     * Start reading from partition offset that is not less than read_offset.
     * Init.max_time_lag_ms and Init.read_timestamp_ms could lead to skip of more messages.
     * The same with actual committed offset. Regardless of set read_offset server will return data from maximal offset from read_offset, actual committed offset
     * and offsets calculated from Init.max_time_lag_ms and Init.read_timestamp_ms.
     *
     * Generated from protobuf field <code>int64 read_offset = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setReadOffset($var)
    {
        GPBUtil::checkInt64($var);
        $this->read_offset = $var;

        return $this;
    }

    /**
     * All messages with offset less than commit_offset are processed by client. Server will commit this position if this is not done yet.
     *
     * Generated from protobuf field <code>int64 commit_offset = 3;</code>
     * @return int|string
     */
    public function getCommitOffset()
    {
        return $this->commit_offset;
    }

    /**
     * All messages with offset less than commit_offset are processed by client. Server will commit this position if this is not done yet.
     *
     * Generated from protobuf field <code>int64 commit_offset = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCommitOffset($var)
    {
        GPBUtil::checkInt64($var);
        $this->commit_offset = $var;

        return $this;
    }

    /**
     * This option will enable sanity check on server for read_offset. Server will verify that read_offset is no less that actual committed offset.
     * If verification will fail then server will kill this read session and client will find out error in reading logic.
     * If client is not setting read_offset, sanity check will fail so do not set verify_read_offset if you not setting correct read_offset.
     *
     * Generated from protobuf field <code>bool verify_read_offset = 4;</code>
     * @return bool
     */
    public function getVerifyReadOffset()
    {
        return $this->verify_read_offset;
    }

    /**
     * This option will enable sanity check on server for read_offset. Server will verify that read_offset is no less that actual committed offset.
     * If verification will fail then server will kill this read session and client will find out error in reading logic.
     * If client is not setting read_offset, sanity check will fail so do not set verify_read_offset if you not setting correct read_offset.
     *
     * Generated from protobuf field <code>bool verify_read_offset = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setVerifyReadOffset($var)
    {
        GPBUtil::checkBool($var);
        $this->verify_read_offset = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(CreatePartitionStreamResponse::class, \Ydb\PersQueue\V1\StreamingReadClientMessageNew_CreatePartitionStreamResponse::class);

