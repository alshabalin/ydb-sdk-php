<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kikimr/public/api/protos/ydb_persqueue_v1.proto

namespace Ydb\PersQueue\V1\StreamingReadServerMessageNew;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Command to create a partition partition stream.
 * Client must react on this signal by sending StartRead when ready recieve data from this partition.
 *
 * Generated from protobuf message <code>Ydb.PersQueue.V1.StreamingReadServerMessageNew.CreatePartitionStreamRequest</code>
 */
class CreatePartitionStreamRequest extends \Google\Protobuf\Internal\Message
{
    /**
     * Partition partition stream description.
     *
     * Generated from protobuf field <code>.Ydb.PersQueue.V1.PartitionStream partition_stream = 1;</code>
     */
    protected $partition_stream = null;
    /**
     * Actual committed offset.
     *
     * Generated from protobuf field <code>int64 committed_offset = 2;</code>
     */
    protected $committed_offset = 0;
    /**
     * Offset of first not existing message in partition till now.
     *
     * Generated from protobuf field <code>int64 end_offset = 3;</code>
     */
    protected $end_offset = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Ydb\PersQueue\V1\PartitionStream $partition_stream
     *           Partition partition stream description.
     *     @type int|string $committed_offset
     *           Actual committed offset.
     *     @type int|string $end_offset
     *           Offset of first not existing message in partition till now.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Kikimr\PBPublic\Api\Protos\YdbPersqueueV1::initOnce();
        parent::__construct($data);
    }

    /**
     * Partition partition stream description.
     *
     * Generated from protobuf field <code>.Ydb.PersQueue.V1.PartitionStream partition_stream = 1;</code>
     * @return \Ydb\PersQueue\V1\PartitionStream
     */
    public function getPartitionStream()
    {
        return isset($this->partition_stream) ? $this->partition_stream : null;
    }

    public function hasPartitionStream()
    {
        return isset($this->partition_stream);
    }

    public function clearPartitionStream()
    {
        unset($this->partition_stream);
    }

    /**
     * Partition partition stream description.
     *
     * Generated from protobuf field <code>.Ydb.PersQueue.V1.PartitionStream partition_stream = 1;</code>
     * @param \Ydb\PersQueue\V1\PartitionStream $var
     * @return $this
     */
    public function setPartitionStream($var)
    {
        GPBUtil::checkMessage($var, \Ydb\PersQueue\V1\PartitionStream::class);
        $this->partition_stream = $var;

        return $this;
    }

    /**
     * Actual committed offset.
     *
     * Generated from protobuf field <code>int64 committed_offset = 2;</code>
     * @return int|string
     */
    public function getCommittedOffset()
    {
        return $this->committed_offset;
    }

    /**
     * Actual committed offset.
     *
     * Generated from protobuf field <code>int64 committed_offset = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setCommittedOffset($var)
    {
        GPBUtil::checkInt64($var);
        $this->committed_offset = $var;

        return $this;
    }

    /**
     * Offset of first not existing message in partition till now.
     *
     * Generated from protobuf field <code>int64 end_offset = 3;</code>
     * @return int|string
     */
    public function getEndOffset()
    {
        return $this->end_offset;
    }

    /**
     * Offset of first not existing message in partition till now.
     *
     * Generated from protobuf field <code>int64 end_offset = 3;</code>
     * @param int|string $var
     * @return $this
     */
    public function setEndOffset($var)
    {
        GPBUtil::checkInt64($var);
        $this->end_offset = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(CreatePartitionStreamRequest::class, \Ydb\PersQueue\V1\StreamingReadServerMessageNew_CreatePartitionStreamRequest::class);

